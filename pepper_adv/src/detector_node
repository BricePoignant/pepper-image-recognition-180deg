#!/usr/bin/env python3
import os
import rospy
import cv2
from sensor_msgs.msg import Image
from vision_msgs.msg import Detection2D, Detection2DArray, ObjectHypothesisWithPose
from std_msgs.msg import String
from std_msgs.msg import Bool
from detector import Detector
import ros_numpy # pip3 install git+https://github.com/eric-wieser/ros_numpy
import numpy as np

#DET_PATH=os.path.join(os.path.dirname(__file__),'efficientdet_d1_coco17_tpu-32')
DET_PATH=os.path.join(os.path.dirname(__file__),'ssd_mobilenet_v2_320x320_coco17_tpu-8')
mydetector = Detector(DET_PATH)

rospy.init_node('detector_node')
pub = rospy.Publisher('detection', Detection2DArray, queue_size=3)
pub2 = rospy.Publisher('ready_check', Bool, queue_size=1)

# The following code is used to preload the detector using a dummy 10x10 blank image
img = np.zeros([10,10,3],dtype=np.uint8)
img.fill(255)
rospy.loginfo("Please wait for Pepper to be ready")
detections = mydetector(img)
rospy.loginfo("Pepper is ready")
pub2.publish(True) # Send back the autorisation to accept user input to head_node

def rcv_image(msg):
    image = ros_numpy.numpify(msg)
    detections = mydetector(image)
    message = Detection2DArray()
    for clabel,score,box in zip(detections['detection_classes'], detections['detection_scores'], detections['detection_boxes']):
        d = Detection2D()
        d.bbox.size_x = box[3]-box[1]
        d.bbox.size_y = box[2]-box[0]
        d.bbox.center.x = box[1]+d.bbox.size_x/2
        d.bbox.center.y = box[0]+d.bbox.size_y/2
        o = ObjectHypothesisWithPose()
        o.score = score
        o.id = clabel
        d.results.append(o)
        message.detections.append(d)
    pub.publish(message)
    rospy.loginfo("published")

si = rospy.Subscriber("image_ctrl", Image, rcv_image)

try:
    rospy.spin()

except KeyboardInterrupt:
    print("Shutting down")
    
